pipeline {
    agent any
    
    environment {
    
        DEPLOYMENT_ENVIRONMENT = 'NO_DEPLOYMENT'
        ACR_LOGINSERVER = ''
        FUTURE_ENV = 'default'
    }

    stages {
    
    stage('Determine Environment') {
    
    steps {
                echo 'Determine Environment'

                script {

                    env.JAVA_HOME="${tool 'JDK14'}"
                    env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
                    sh "java -version"
                    // Determine whether this is a test or a staging / production build              
                    switch (env.GIT_BRANCH) {
                        case 'origin/staging':
                            GLOBAL_ENVIRONMENT = 'staging'
                            ACR_LOGINSERVER = env.ACR_DEV_LOGINSERVER
                            break
                        case 'origin/master':
                            GLOBAL_ENVIRONMENT = 'production'
                            ACR_LOGINSERVER = env.ACR_PROD_LOGINSERVER
                            break
                        default: 
                            GLOBAL_ENVIRONMENT = 'NO_DEPLOYMENT'
                            break
                    }
                }
    }
    }
        stage('Build') {
            steps {
                echo 'Building..' + GLOBAL_ENVIRONMENT
                 script {
                    if (GLOBAL_ENVIRONMENT == 'NO_DEPLOYMENT') {
                    
                    	currentBuild.result = 'ABORTED'
                    	error('This is not develop nor master branch and should not be build')
                    } else {
                        build(GLOBAL_ENVIRONMENT)
                    }
                }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                withMaven( maven: 'maven-3.6.3' ) {
                		sh 'cd future-authorization-server && mvn test'
                }

            }
        }
        
        stage('Deploy') {
            steps {
           
            script {
                  if (GLOBAL_ENVIRONMENT == 'staging') {
                    
                    sh "kubectl config use-context marcus-developement-cluster"
					sh "kubectl set image deployment/future-auth-server future-auth-server=${ACR_LOGINSERVER}/future-authorization-server --namespace project-future"
					sh "kubectl rollout restart deployment/future-auth-server --namespace project-future"
					
                  } else {
                    sh "kubectl config use-context MarcusProdAKSCluster"
                    sh "kubectl set image deployment/future-auth-server future-auth-server=${ACR_LOGINSERVER}/future-authorization-server --namespace project-future"
                    sh "kubectl rollout restart deployment/future-auth-server --namespace project-future"
                  }
                }
            
           
		    
            }
        }
    }
}

def build(ENVIRONMENT) {
  echo "Hello, ${ENVIRONMENT}."
  if(ENVIRONMENT == 'staging'){
    withCredentials([usernamePassword(credentialsId: 'acr-dev-credentials', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {
    
    	 withMaven( maven: 'maven-3.6.3' ) {
    	 	withEnv(["FUTURE_ENV=staging","ACR_SERVER=${ACR_LOGINSERVER}"]){
				sh 'cd future-authorization-server && mvn clean compile jib:build'
			}

    	 } 
    
    }
  
  }else{
    withCredentials([usernamePassword(credentialsId: 'acr-prod-credentials', usernameVariable: 'ACR_USERNAME', passwordVariable: 'ACR_PASSWORD')]) {
     
     	withMaven( maven: 'maven-3.6.3' ) {
     		withEnv(["FUTURE_ENV=production","ACR_SERVER=${ACR_LOGINSERVER}"]){
     			sh 'cd future-authorization-server && mvn clean compile jib:build'
     		}

    	 } 
    }
    
  }
  
}